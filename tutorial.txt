. npx create-next-app@lastest --typescript 

TAILWIND
. Install Tailwind in Next
. use @apply to apply tailwind in css class in global.css


LAYOUT
. Create Layout.tsx and give wrap in <Layout> <Component {...pageProps}/> <Layout/> in _app.tsx
 OBS: u can let Layout with unic title in _app.tsx or wrap ever each page with <Layou title="page's title"><content></Layou>
. config Layout.tsx


DATA BANK
. create Utils/data.ts with data model type 
. add images in public/images


COMPONENT PRODUCT 
. building component/ProductItem.tsx and add data path in all elements
. Create model/interface to the Products



 CREATE DINAMYC PRODUCT PAGE 
. Create product/[slug].tsx and apply the logic in .find() to  redirect item to slug page

. install:  npm i -D @types/react


  USECONTEXT AND REDUCE

. Add utils/Store.tsx and create function reduce and createContext mix both and export to _app.tsx  and wrap 
<StoreProvider><Layout><Component {...pageProps} /></Layout></StoreProvider> in _app.tsx

. In function Reduce put the all actions to manage item in CART as 'CART_REMOVE_ITEM' and 'CART_ADD_ITEM'

. In [slug].tsx import StoreContext to use "DISPATCH" and create a function to add product in Cart,  use it and set this function in onClick event 
. In Layout.tsx import StoreContext to use "STATE" destructure the {cart} and create logic to render the length of product beside of Cart in header

ADD PRODUCT IN CART 
. In "ProductItem.tsx" and "[slug].tsx" add logic using state in  function addToCartHandler() to add item from same product

CART PAGE 
. create page/cart.tsx 
. install react icons: 'npm install react-icons --save'
. import icon from: https://react-icons.github.io/react-icons
. create functions using reduce to use in onclick event in button and use in <select> tag


SAVE CART IN COOKIES 
. install cookies: npm install js-cookie@2.2.1
. install too: npm install @types/js-cookie
. Store.tsx import and set cookies using Cookie.get and Cookie.set
. In cart.tsx export component use dynamic an Promise
. In Layout.tsx apply the useState and useEffect to control the mult render in page
. In eslintrc.json add: "env": {"browser":true, "node":true , "es6":true},


CREATE LOGIN
. create pages/login.tsx
. buiding form in login.tsx
. to star building validation install: npm install react-hook-form  
. npm install yup
. npm install formik 
. in login.tsx use useForm()




